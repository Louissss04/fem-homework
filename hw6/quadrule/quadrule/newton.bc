#!/usr/bin/bc -lq
#
# BC script for performing Newton iterations
#
# $Id: newton.bc,v 1.51 2020/03/18 07:15:23 zlb Exp $

t = setup()

step = 0
n = ncoord + nstars
m = neqns
if (n * m > 65535 && 0) {
    # Note: can find out the actual BC_DIM_MAX using the bc command 'limits'
    print "WARNING: BC_DIM_MAX exceeded, newton steps won't be performed.\n"
    flag = 0
} else {
    flag = 1
}

error0 = -1
resid = 10
while (1) {
    if (tol < 0.0) {
	print "*** Newton iterations skipped since tol < 0\n"
	break
    }
    print "*** Newton step ", step++, ", error = "
    if (error0 < 0) error0 = error + 1
    t = print_float(error = func(flag), 4)
    print ", residual = "
    t = print_float(resid, 4)
    print "\n"
    if (!flag) halt
    if (error < tol || resid < tol) break;
    if (error0 <= error) {
	print "*** Newton iterations stopped due to increasing error.\n"
	break
    }
    error0 = error

    /* process constrained variables by clearing the corresponding columns
     * in the matrix (this works thanks to full pivoting and the fact that
     * the constrained components in the solution are not used) */
    for (k = 0; k < ncoord; k++) {
	if (constraints[k] < 0) continue
	/* clear the k-th column */
	for (i = 0; i < m; i++) fjac[i * lda + k] = 0.0
    }

    if (0) {	/* compute the least square solution, slower (less reliable?) */
	/* compute fvec := fjac^t fvec */
	for (i = 0; i < n; i++) {
	    d = 0
	    for (j = 0; j < m; j++)
		d += fjac[j * lda + i] * fvec[j]
	    tmp[i] = d
	}
	for (i = 0; i < n; i++) {
	    fvec[i] = tmp[i]
	}
	/* compute fjac := fjac^t fjac */
	for (i = 0; i < n; i++) {
	    for (j = 0; j < n; j++) {
		d = 0
		for (k = 0; k < m; k++)
		    d += fjac[k * lda + i] * fjac[k * lda + j]
		tmp[j * n + i] = d
	    }
	}
	for (i = 0; i < n * n; i++)
	    fjac[i] = tmp[i]
	
	t = solve(n, n, n)
    } else {	/* use a subset of equations, faster */
	t = solve(m, n, lda)
    }

    resid = 0
    for (i = 0; i < ncoord + nstars; i++) {
	if (i >= ncoord) {
	    wgts[i-ncoord] -= fvec[i]
	} else if (constraints[i] < 0) {
	    absc[i] -= fvec[i]
	}
	d = fvec[i]
	if (d < 0) d = -d
	if (resid < d) resid = d
    }
}

/* check and print weights */
print "static FLOAT QUAD_", dim, "D_P", order, "_wts[] = {\n"
w_min = 1
w_pos = 0
for (i = 0; i < nstars; i++) {
    d = wgts[i] / vol
    if (d <= 0.) {
	print "/**/Dup", stars[i], "("
    } else {
	print "    Dup", stars[i], "("
    }
    t = print_float(d, digits)
    if (i < nstars - 1) {print "),\n"} else {print ")\n"}
    if (w_min > d) {w_min = d; w_pos = i + 1}
}
print "};\n"

/* check and print absscissas */
print "static FLOAT QUAD_", dim, "D_P", order, "_pts[Length(QUAD_", dim
print "D_P", order, "_wts) * ", dim + 1, "] = {\n"
n = 0
m = 0
na = 0
x_min = 1
x_pos = 0
for (i = 0; i < nstars; i++) {
    pm = mat[stars[i]] 
    pv = vec[stars[i]]
    np = npnts[stars[i]]
    flag = 0
    for (j = 0; j < np; j++) {
	lambda4 = 1.0
	for (k = 0; k < dim; k++) {
	    coord = perm_vec[pv++]
	    for (l = 0; l < nabsc[stars[i]]; l++) {
		coord +=  perm_mat[pm + l*dim + k] * absc[m + l]
	    }
	    if (coord < 0. || coord > 1.) flag += 1;
	    if (x_min > coord) {x_min = coord; x_pos = i + 1}
	    lambda4 -= coord
	}
	coord = lambda4
	if (coord < 0. || coord > 1.) flag += 1;
	if (x_min > coord) {x_min = coord; x_pos = i + 1}
	pm += dim * nabsc[stars[i]]
	n += 1
    }
    m += nabsc[stars[i]]

    cons = 0
    for (j = 0; j < nabsc[stars[i]]; j++) {
	if (constraints[na + j] >= 0) {
	    cons = 1
	    break
	}
    }
    star = stars[i]
    if (star == 0) {star = (dim + 1) * 10}
    if (cons) {
	if (flag > 0) {
	    print "/**/Cons", star, "("
	} else {
	    print "    Cons", star, "("
	}
    } else {
	if (flag > 0) {
	    print "/**/Perm", star, "("
	} else {
	    print "    Perm", star, "("
	}
    }
    if (nabsc[stars[i]] == 0) t = print_float(1/(dim+1), digits) else {
	for (j = 0; j < nabsc[stars[i]]; j++) {
	    if (j > 0) print ","
	    t = print_float(absc[na++], digits)
	}
    }
    if (i < nstars - 1) {print "),\n"} else {print ")\n"}
}
print "};\n"

print "static QUAD QUAD_", dim, "D_P", order, "_ = {\n"
print "    %", dim, "D P", order, "%,			/* name */\n"
print "    ", dim, ",				/* dim */\n"
print "    ", order, ",				/* order */\n"
print "    Length(QUAD_", dim, "D_P", order, "_wts),	/* npoints = "
    print npoints, " */\n"
print "    QUAD_", dim, "D_P", order, "_pts,		/* points */\n"
print "    QUAD_", dim, "D_P", order, "_wts,		/* weights */\n"
print "    -1				/* id */\n"
print "};\n"
print "#define QUAD_", dim, "D_P", order, " (&QUAD_", dim, "D_P", order, "_)\n"

/* compute and print significance factors */
/*t = print_sfactors()*/
print "\n*** Minimum weight (star ", w_pos, ")   = "
t = print_float(w_min, digits)
print "\n*** Minimum abscissa (star ", x_pos, ") = "
t = print_float(x_min, digits)
print "\n"

quit
